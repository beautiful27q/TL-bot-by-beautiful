import discord
from typing import List, Dict, Optional, Tuple
from datetime import datetime, timedelta
from storage.memory import memory  # <--- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ä–æ–ª—è–º

import pytz
moscow_tz = pytz.timezone("Europe/Moscow")  # FIX: –∏–º–ø–æ—Ä—Ç –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã

def get_username(user_id: int) -> str:
    return f"<@{user_id}>"

ROLE_EMOJIS = {
    "–ª–∏–¥–µ—Ä": "üëë",
    "—Ç–∞–Ω–∫": "üõ°Ô∏è",
    "—Ö–∏–ª": "üíâ",
    "–¥–¥": "‚öîÔ∏è",
    "–¥–¥1": "‚öîÔ∏è",
    "–¥–¥2": "‚öîÔ∏è",
    "–¥–¥3": "‚öîÔ∏è",
    "–¥–¥4": "‚öîÔ∏è",
    "–Ω–µ—Ç": "‚ùå"
}

def humanize_timedelta(event_dt: datetime) -> str:
    # FIX: –µ—Å–ª–∏ event_dt —Å–æ–¥–µ—Ä–∂–∏—Ç tzinfo, –±–µ—Ä—ë–º now —Ç–æ–∂–µ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
    if event_dt and event_dt.tzinfo:
        now = datetime.now(event_dt.tzinfo)
    else:
        now = datetime.now(moscow_tz)
    delta = event_dt - now
    total_seconds = int(delta.total_seconds())

    if total_seconds >= 0:
        minutes = (total_seconds // 60) % 60
        hours = (total_seconds // 3600) % 24
        days = total_seconds // 86400
        if days > 0:
            return f"—á–µ—Ä–µ–∑ {days} –¥–Ω. {hours} —á."
        elif hours > 0:
            return f"—á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
        else:
            return f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."
    else:
        total_seconds = abs(total_seconds)
        minutes = (total_seconds // 60) % 60
        hours = (total_seconds // 3600) % 24
        days = total_seconds // 86400
        if days > 0:
            ago_str = f"{days} –¥–Ω. {hours} —á. –Ω–∞–∑–∞–¥"
        elif hours > 0:
            ago_str = f"{hours} —á. {minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            ago_str = f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        return f"**üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {ago_str}**"

def render_declined(declined: List[int], user_roles: Dict[int, str], event_guild_id: Optional[int] = None) -> Optional[str]:
    if not declined:
        return None
    role_map = {
        "—Ç–∞–Ω–∫": "–¢–∞–Ω–∫",
        "—Ö–∏–ª": "–•–∏–ª",
        "–¥–¥": "–î–î",
        "–¥–¥1": "–î–î",
        "–¥–¥2": "–î–î",
        "–¥–¥3": "–î–î",
        "–¥–¥4": "–î–î"
    }
    lines = []
    for uid in declined:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ event_state, –ø–æ—Ç–æ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        role_key = user_roles.get(uid)
        if not role_key and event_guild_id is not None:
            # –ë–µ—Ä—ë–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å
            role_key = memory.user_roles.get(event_guild_id, {}).get(uid, '–Ω–µ—Ç')
        if not role_key:
            role_key = '–Ω–µ—Ç'
        role_str = role_map.get(role_key, "–ù–µ—Ç") if role_key != "–Ω–µ—Ç" else "–ù–µ—Ç"
        emoji = ROLE_EMOJIS.get(role_key, "‚ùå")
        lines.append(f"{emoji} {get_username(uid)} ({role_str})")
    return "‚ùå **–ù–µ —Å–º–æ–≥—É—Ç:**\n" + "\n".join(lines)

def render_group(group: Dict[str, Optional[int]], idx: int) -> str:
    lines = [f"**–ì—Ä—É–ø–ø–∞ {idx+1}**"]
    leader_uid = group.get("–ª–∏–¥–µ—Ä")
    if leader_uid is not None:
        lines.append(f"{ROLE_EMOJIS['–ª–∏–¥–µ—Ä']} –õ–∏–¥–µ—Ä: {get_username(leader_uid)}")
    else:
        lines.append(f"{ROLE_EMOJIS['–Ω–µ—Ç']} –õ–∏–¥–µ—Ä: –ù–µ—Ç")
    for role in ["—Ç–∞–Ω–∫", "—Ö–∏–ª", "–¥–¥1", "–¥–¥2", "–¥–¥3", "–¥–¥4"]:
        uid = group.get(role)
        if uid is not None:
            role_disp = {
                "—Ç–∞–Ω–∫": "–¢–∞–Ω–∫",
                "—Ö–∏–ª": "–•–∏–ª",
                "–¥–¥1": "–î–î1",
                "–¥–¥2": "–î–î2",
                "–¥–¥3": "–î–î3",
                "–¥–¥4": "–î–î4",
            }.get(role, role.capitalize())
            lines.append(f"{ROLE_EMOJIS.get(role if role in ROLE_EMOJIS else '–¥–¥', '‚ùå')} {role_disp}: {get_username(uid)}")
        else:
            role_disp = {
                "—Ç–∞–Ω–∫": "–¢–∞–Ω–∫",
                "—Ö–∏–ª": "–•–∏–ª",
                "–¥–¥1": "–î–î1",
                "–¥–¥2": "–î–î2",
                "–¥–¥3": "–î–î3",
                "–¥–¥4": "–î–î4",
            }.get(role, role.capitalize())
            lines.append(f"{ROLE_EMOJIS.get('–Ω–µ—Ç', '‚ùå')} {role_disp}: –ù–µ—Ç")
    return "\n".join(lines)

def render_groups(groups: List[Dict[str, Optional[int]]]) -> List[str]:
    fields = []
    for i in range(0, len(groups), 3):
        chunk = groups[i:i+3]
        for j, group in enumerate(chunk):
            fields.append(render_group(group, i+j))
        for _ in range(3 - len(chunk)):
            fields.append("\u200b")
    return fields

def build_event_embed(
    event_info: dict,
    event_state,
    color: int = 0x00aaff
) -> discord.Embed:
    is_recurring = event_info.get("is_recurring", False)
    title_icon = "üîÅüõ°Ô∏è" if is_recurring else "üõ°Ô∏è"
    title = f"{title_icon} {event_info.get('name', '–°–æ–±—ã—Ç–∏–µ')}"
    description_lines = []
    raw_dt = event_info.get('datetime', '‚Äî')

    # FIX: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ISO-—Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
    dt = None
    try:
        dt = datetime.fromisoformat(raw_dt)
        dt_str = dt.strftime("%d.%m.%Y %H:%M")
    except Exception:
        # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ ISO, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        for fmt in ("%d-%m-%Y %H:%M", "%Y-%m-%d %H:%M", "%d.%m.%Y %H:%M"):
            try:
                dt = datetime.strptime(raw_dt, fmt)
                dt_str = dt.strftime("%d.%m.%Y %H:%M")
                break
            except Exception:
                dt_str = raw_dt

    description_lines.append(f"**–ù–∞—á–∞–ª–æ:** {dt_str}")

    comment = event_info.get('comment', None)
    if comment:
        description_lines.append(f"üí¨ {comment}")

    description = "\n".join(description_lines)

    embed = discord.Embed(
        title=title,
        description=description,
        color=color
    )

    # –ü–æ–ª—É—á–∞–µ–º guild_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π
    guild_id = event_info.get("guild_id") or event_info.get("guild", {}).get("id")
    declined_block = render_declined(event_state.get_declined_list(), event_state.user_roles, guild_id)
    if declined_block:
        embed.add_field(name="\u200b", value=declined_block, inline=False)

    group_datas = event_state.get_group_data()
    group_fields = render_groups(group_datas)
    for i in range(0, len(group_fields), 3):
        chunk = group_fields[i:i+3]
        for j, group_str in enumerate(chunk):
            embed.add_field(
                name="\u200b",
                value=group_str,
                inline=True
            )

    # FIX: —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ ISO-—Å—Ç—Ä–æ–∫–µ
    event_dt = dt
    time_left_str = humanize_timedelta(event_dt) if event_dt else "‚Äî"

    embed.add_field(
        name="‚è≥ –í—Ä–µ–º—è",
        value=time_left_str,
        inline=True
    )

    if event_dt and event_dt < (datetime.now(event_dt.tzinfo) if event_dt.tzinfo else datetime.now(moscow_tz)):
        status_str = "üî¥ –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    else:
        status_str = "üü¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞"

    embed.add_field(
        name="üü¢ –°—Ç–∞—Ç—É—Å",
        value=status_str,
        inline=True
    )

    if is_recurring:
        embed.set_footer(text="üîÅ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ ‚Ä¢ \nüêß Created by beautiful")
    else:
        embed.set_footer(text="üêß Created by beautiful")

    return embed

def build_event_buttons(registration_open: bool) -> discord.ui.View:
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            style=discord.ButtonStyle.success,
            label="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
            custom_id="event_join",
            disabled=not registration_open
        )
    )
    view.add_item(
        discord.ui.Button(
            style=discord.ButtonStyle.danger,
            label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            custom_id="event_leave",
            disabled=not registration_open
        )
    )
    view.add_item(
        discord.ui.Button(
            style=discord.ButtonStyle.secondary,
            label="üö´ –ù–µ —Å–º–æ–≥—É",
            custom_id="event_decline",
            disabled=not registration_open
        )
    )
    return view

render_groups_embed = build_event_embed