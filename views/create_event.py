import discord
from storage.memory import active_events, EventState, memory
from logic.render import render_groups_embed
from views.participant import ParticipantView
from datetime import datetime
from views.channel_select import ChannelSelectView

# –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º –ú–æ—Å–∫–≤—ã
try:
    from zoneinfo import ZoneInfo
    moscow_tz = ZoneInfo("Europe/Moscow")
except ImportError:
    import pytz
    moscow_tz = pytz.timezone("Europe/Moscow")

class CreateEventModal(discord.ui.Modal, title="–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"):
    name = discord.ui.TextInput(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Riftstone",
        required=True
    )
    date = discord.ui.TextInput(
        label="–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)",
        placeholder="–ü—Ä–∏–º–µ—Ä: 06.07.2025",
        required=True
    )
    time = discord.ui.TextInput(
        label="–í—Ä–µ–º—è (—á—á:–º–º)",
        placeholder="–ü—Ä–∏–º–µ—Ä: 20:00",
        required=True
    )
    comment = discord.ui.TextInput(
        label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–µ–ª—å—è",
        style=discord.TextStyle.paragraph,
        required=False
    )

    async def on_submit(self, interaction: discord.Interaction):
        guild_id = interaction.guild.id
        date_str = self.date.value.strip()
        time_str = self.time.value.strip()
        dt_str = f"{date_str} {time_str}"
        try:
            dt_naive = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            dt = dt_naive.replace(tzinfo=moscow_tz)
            dt_str = dt.strftime("%d.%m.%Y %H:%M")
        except Exception:
            await interaction.response.send_message(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏ —á—á:–º–º.",
                ephemeral=True
            )
            return

        event_info = {
            "name": str(self.name),
            "datetime": dt_str,
            "comment": str(self.comment or "‚Äî"),
            "created_by": interaction.user.id,
            "created_at": datetime.now(moscow_tz).isoformat()  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ –ú–æ—Å–∫–≤–µ
        }

        async def after_channel_selected(new_interaction, channel_id):
            event_info["selected_channel_id"] = channel_id
            channel = new_interaction.guild.get_channel(channel_id)
            event_state = EventState()
            embed = render_groups_embed(event_info, event_state)
            view = ParticipantView(event_state, guild_id)
            if guild_id not in active_events:
                active_events[guild_id] = []
            sent_message = await channel.send(embed=embed, view=view)
            active_events[guild_id].append({
                "message_id": sent_message.id,
                "channel_id": sent_message.channel.id,
                "event_info": event_info,
                "event_state": event_state
            })
            # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
            await new_interaction.response.send_message("üì® –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", ephemeral=False, delete_after=10)

        view = ChannelSelectView(interaction.client, after_channel_selected)
        await view.setup(interaction.guild)
        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è:",
            view=view,
            ephemeral=False,
            delete_after=15
        )